"use strict";(self.webpackChunkapp=self.webpackChunkapp||[]).push([[8831],{8831:(h,m,s)=>{s.r(m),s.d(m,{BiometricAuthWeb:()=>u});var l=s(467),a=s(3240),i=s(67),c=s(5279);class u extends a.k{constructor(){super(...arguments),this.biometryType=i.me.none,this.biometryTypes=[],this.biometryIsEnrolled=!1,this.deviceIsSecure=!1}checkBiometry(){var e=this;return(0,l.A)(function*(){const r=e.biometryType!==i.me.none;let o="",n=i.UK.none;return r?e.biometryIsEnrolled||(o="Biometry is not enrolled",n=i.UK.biometryNotEnrolled):(o="No biometry is available",n=i.UK.biometryNotAvailable),Promise.resolve({isAvailable:r&&e.biometryIsEnrolled,strongBiometryIsAvailable:e.biometryIsEnrolled&&e.hasStrongBiometry(),biometryType:e.biometryType,biometryTypes:e.biometryTypes,deviceIsSecure:e.deviceIsSecure,reason:o,code:n})})()}hasStrongBiometry(){return this.biometryTypes.some(e=>e===i.me.faceId||e===i.me.touchId||e===i.me.fingerprintAuthentication)}internalAuthenticate(e){var r=this;return(0,l.A)(function*(){const t=yield r.checkBiometry();if(!t.isAvailable||!confirm(e?.reason||`Authenticate with ${t.biometryTypes.map(o=>(0,c.t)(o)).join(" or ")}?`)){if(e?.allowDeviceCredential){if(t.deviceIsSecure){if(confirm("Authenticate with device security?"))return;throw new i.el("User cancelled",i.UK.userCancel)}if(t.isAvailable)throw new i.el("Device is not secure",i.UK.noDeviceCredential)}else if(!t.isAvailable)throw t.biometryType===i.me.none?new i.el("Biometry is not available",i.UK.biometryNotAvailable):new i.el("Biometry is not enrolled",i.UK.biometryNotEnrolled);throw new i.el("User cancelled",i.UK.userCancel)}})()}setBiometryType(e){var r=this;return(0,l.A)(function*(){if(void 0===e)return Promise.resolve();const t=Array.isArray(e)?e:[e];if(r.biometryTypes=[],r.biometryType=i.me.none,0===t.length)return Promise.resolve();if(function b(y){return Object.values(i.me).includes(y[0])}(t))r.biometryType=t[0],r.biometryType!==i.me.none&&(r.biometryTypes=t);else for(let o=0;o<t.length;o++)if(i.me.hasOwnProperty(t[o])){const n=i.me[t[o]];r.biometryType===i.me.none?r.biometryTypes=[]:r.biometryTypes.push(n),0===o&&(r.biometryType=n)}return Promise.resolve()})()}setBiometryIsEnrolled(e){var r=this;return(0,l.A)(function*(){return r.biometryIsEnrolled=e,Promise.resolve()})()}setDeviceIsSecure(e){var r=this;return(0,l.A)(function*(){return r.deviceIsSecure=e,Promise.resolve()})()}}}}]);